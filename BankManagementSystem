import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList; 
import java.util.List; 

public class BankManagementSystem {
    private static JFrame mainFrame;
    private static JPanel mainPanel;
    private static CardLayout cardLayout;
    private static File usersFile = new File("users.txt"); // File to store user data
    private static double balance = 0.0;
    private static List<String> transactionHistory = new ArrayList<>(); // List to store transaction history
    private static String profileName = ""; // Initialize with empty strings
    private static String profileEmail = "";
    private static String profileAddress = "";
    private static String profilePhone = "";

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI();
        });
    }

    private static void createAndShowGUI() {
        mainFrame = new JFrame("Login System");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainPanel = new JPanel();
        cardLayout = new CardLayout();
        mainPanel.setLayout(cardLayout);

        createLoginPanel();
        createRegisterPanel();
        createProductPanel(); // New method for Product/Service panel
        createMainMenu(); // New method for creating the main menu

        mainFrame.add(mainPanel);
        mainFrame.setSize(500, 250); // Set initial frame size
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setVisible(true);
    }

    private static void createLoginPanel() {
        JPanel loginPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        loginPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton goToRegisterButton = new JButton("Register");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (validateLogin(username, password)) {
                    JOptionPane.showMessageDialog(mainFrame, "Login successful!");
                    cardLayout.show(mainPanel, "MainMenu"); // Switch to the main menu
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Invalid username/password combination.");
                }
            }
        });

        goToRegisterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Register");
            }
        });

        loginPanel.add(usernameLabel);
        loginPanel.add(usernameField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(goToRegisterButton);

        mainPanel.add(loginPanel, "Login");
    }

    private static void createRegisterPanel() {
        JPanel registerPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        registerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel idLabel = new JLabel("ID:");
        idLabel.setFont(labelFont);
        JTextField idField = new JTextField();
        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
        confirmPasswordLabel.setFont(labelFont);
        JPasswordField confirmPasswordField = new JPasswordField();
        JButton registerButton = new JButton("Register");
        JButton goToLoginButton = new JButton("Login");

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                if (id.trim().isEmpty() || username.trim().isEmpty() || password.trim().isEmpty() || confirmPassword.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(mainFrame, "Please fill in all fields.");
                    return;
                }

                if (registerUser(username, password)) {
                    JOptionPane.showMessageDialog(mainFrame, "Registration successful!");
                    cardLayout.show(mainPanel, "Login");
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Error registering user.");
                }
            }
        });

        goToLoginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Login");
            }
        });

        registerPanel.add(idLabel);
        registerPanel.add(idField);
        registerPanel.add(usernameLabel);
        registerPanel.add(usernameField);
        registerPanel.add(passwordLabel);
        registerPanel.add(passwordField);
        registerPanel.add(confirmPasswordLabel);
        registerPanel.add(confirmPasswordField);
        registerPanel.add(registerButton);
        registerPanel.add(goToLoginButton);

        mainPanel.add(registerPanel, "Register");
    }

    private static void createProductPanel() {
        JPanel productPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        productPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel productCodeLabel = new JLabel("Product Code:");
        productCodeLabel.setFont(labelFont);
        JTextField productCodeField = new JTextField("P001"); // Default product code
        JLabel descriptionLabel = new JLabel("Description:");
        descriptionLabel.setFont(labelFont);
        JTextField descriptionField = new JTextField("Pepperoni"); // Default description
        JLabel priceLabel = new JLabel("Price:");
        priceLabel.setFont(labelFont);
        JTextField priceField = new JTextField("3.99"); // Default price
        JLabel quantityLabel = new JLabel("Quantity:");
        quantityLabel.setFont(labelFont);
        JTextField quantityField = new JTextField("10"); // Default quantity

        JButton addProductButton = new JButton("Add Product");

        addProductButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Retrieve the entered product information
                String productCode = productCodeField.getText().trim();
                String description = descriptionField.getText().trim();
                String price = priceField.getText().trim();
                String quantity = quantityField.getText().trim();

                // Validate and process the entered information as needed
                // For now, let's display the gathered information
                String productInfo = "Product Code: " + productCode + "\n"
                        + "Description: " + description + "\n"
                        + "Price: " + price + "\n"
                        + "Quantity: " + quantity;
                JOptionPane.showMessageDialog(mainFrame, productInfo);
            }
        });

        productPanel.add(productCodeLabel);
        productPanel.add(productCodeField);
        productPanel.add(descriptionLabel);
        productPanel.add(descriptionField);
        productPanel.add(priceLabel);
        productPanel.add(priceField);
        productPanel.add(quantityLabel);
        productPanel.add(quantityField);
        productPanel.add(new JLabel()); // Placeholder for alignment
        productPanel.add(addProductButton);

        mainPanel.add(productPanel, "ProductPanel");
    }

    // Method to create the main menu
    private static void createMainMenu() {
        JPanel mainMenuPanel = new JPanel(new GridLayout(5, 1, 10, 10));
        mainMenuPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JButton depositButton = new JButton("Deposit");
        JButton withdrawButton = new JButton("Withdraw");
        JButton transactionHistoryButton = new JButton("Transaction History");
        JButton accountBalanceButton = new JButton("Account Balance");
        JButton profileButton = new JButton("Profile");
        JButton logoutButton = new JButton("Logout");

        // Action listeners for menu buttons

        // Action listeners for menu buttons
          depositButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for deposit button
                  performDeposit();
              }
          });
      
          withdrawButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for withdraw button
                  performWithdraw();
              }
          });
      
          transactionHistoryButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for transaction history button
                  showTransactionHistory();
              }
          });
      
          accountBalanceButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for account balance button
                  showAccountBalance();
              }
          });
      
          profileButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for profile button
                  showProfile();
              }
          });
      
          logoutButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for logout button
                  performLogout();
              }
          });


        mainMenuPanel.add(depositButton);
        mainMenuPanel.add(withdrawButton);
        mainMenuPanel.add(transactionHistoryButton);
        mainMenuPanel.add(accountBalanceButton);
        mainMenuPanel.add(profileButton);
        mainMenuPanel.add(logoutButton); 

        mainPanel.add(mainMenuPanel, "MainMenu");
    }
    
    private static void recordTransaction(String type, double amount) {
        String transaction = type + " - Amount: P" + amount;
        transactionHistory.add(transaction);
    }

    private static void showTransactionHistory() {
        StringBuilder transactionInfo = new StringBuilder("Transaction History:\n");
        for (String transaction : transactionHistory) {
            transactionInfo.append(transaction).append("\n");
        }
        JOptionPane.showMessageDialog(mainFrame, transactionInfo.toString());
    }

    private static void performDeposit() {
        String amountString = JOptionPane.showInputDialog(mainFrame, "Enter amount to deposit:");
        try {
            double amount = Double.parseDouble(amountString);
            if (amount > 0) {
                balance += amount; // Update balance with deposited amount
                recordTransaction("Deposit", amount); // Record deposit transaction
                JOptionPane.showMessageDialog(mainFrame, "Deposited amount: P" + amount);
            } else {
                JOptionPane.showMessageDialog(mainFrame, "Please enter a valid positive amount.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Please enter a valid numeric amount.");
        }
    }

    private static void performWithdraw() {
        String amountString = JOptionPane.showInputDialog(mainFrame, "Enter amount to withdraw:");
        try {
            double amount = Double.parseDouble(amountString);
            if (amount > 0) {
                if (amount <= balance) {
                    balance -= amount; // Update balance with withdrawn amount
                    recordTransaction("Withdrawal", amount); // Record withdrawal transaction
                    JOptionPane.showMessageDialog(mainFrame, "Withdrawn amount: P" + amount);
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Insufficient funds.");
                }
            } else {
                JOptionPane.showMessageDialog(mainFrame, "Please enter a valid positive amount.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Please enter a valid numeric amount.");
        }
    }       
       // Account balance functionality
       private static void showAccountBalance() {
           JOptionPane.showMessageDialog(mainFrame, "Current Balance: P" + balance);
       }     
        
    // PROFILE    
    private static void showProfile() {
    JPanel profilePanel = new JPanel(new GridLayout(6, 2, 10, 10));
    profilePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
    Font labelFont = new Font("Arial", Font.BOLD, 14);

    JLabel nameLabel = new JLabel("Name:");
    nameLabel.setFont(labelFont);
    JTextField nameField = new JTextField(profileName);

    JLabel emailLabel = new JLabel("Email:");
    emailLabel.setFont(labelFont);
    JTextField emailField = new JTextField(profileEmail);

    JLabel addressLabel = new JLabel("Address:");
    addressLabel.setFont(labelFont);
    JTextField addressField = new JTextField(profileAddress);

    JLabel phoneLabel = new JLabel("Phone:");
    phoneLabel.setFont(labelFont);
    JTextField phoneField = new JTextField(profilePhone);

    JButton editButton = new JButton("Edit");
    JButton saveButton = new JButton("Save");
    JButton backButton = new JButton("Back to Menu");

    editButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Enable editing of profile fields
            nameField.setEditable(true);
            emailField.setEditable(true);
            addressField.setEditable(true);
            phoneField.setEditable(true);
            // Show the save button
            saveButton.setVisible(true);
        }
    });

    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Save changes and display updated profile
            profileName = nameField.getText();
            profileEmail = emailField.getText();
            profileAddress = addressField.getText();
            profilePhone = phoneField.getText();

            // Display updated profile details
            String updatedInfo = "Name: " + profileName + "\n"
                    + "Email: " + profileEmail + "\n"
                    + "Address: " + profileAddress + "\n"
                    + "Phone: " + profilePhone;
            JOptionPane.showMessageDialog(mainFrame, "Profile updated!\n\n" + updatedInfo);

            // Disable editing of profile fields
            nameField.setEditable(false);
            emailField.setEditable(false);
            addressField.setEditable(false);
            phoneField.setEditable(false);
            // Hide the save button after saving
            saveButton.setVisible(false);
        }
    });

    backButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            cardLayout.show(mainPanel, "MainMenu");
        }
    });

    // Initially set fields as uneditable
    nameField.setEditable(false);
    emailField.setEditable(false);
    addressField.setEditable(false);
    phoneField.setEditable(false);
    // Initially hide the save button
    saveButton.setVisible(false);

    // Restrict phoneField to accept only numeric input
    phoneField.addKeyListener(new KeyAdapter() {
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
                e.consume();
            }
        }
    });

    profilePanel.add(nameLabel);
    profilePanel.add(nameField);
    profilePanel.add(emailLabel);
    profilePanel.add(emailField);
    profilePanel.add(addressLabel);
    profilePanel.add(addressField);
    profilePanel.add(phoneLabel);
    profilePanel.add(phoneField);
    profilePanel.add(editButton);
    profilePanel.add(saveButton);
    profilePanel.add(backButton);

    mainPanel.add(profilePanel, "ProfilePanel");
    cardLayout.show(mainPanel, "ProfilePanel");
}     
      // Logout functionality
      private static void performLogout() {
          cardLayout.show(mainPanel, "Login"); // Switching back to the login panel after logout
      }
          

    // Validation method for login
    private static boolean validateLogin(String username, String password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(usersFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(":");
                if (userData.length == 2 && userData[0].equals(username) && userData[1].equals(password)) {
                    return true;
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    // Method to register user
    private static boolean registerUser(String username, String password) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(usersFile, true))) {
            writer.write(username + ":" + password);
            writer.newLine();
            return true;
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }
}
